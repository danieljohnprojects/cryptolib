import secrets

from math import ceil
from functools import reduce
from typing import Optional

from .Pipe import Pipe

from ..rngs import RNG_generators
from ..utils.byteops import block_xor

class PRNGStreamCipher(Pipe):
    """
    A pipe that xors a given stream of bytes with a stream of pseudo-randomly generated bytes.
    """

    def __init__(self, 
                 algorithm: str,
                 seed: Optional[int]=None,
                 **kwargs):
        engine_generator = RNG_generators[algorithm.lower()]
        if seed is None:
            seed = secrets.randbelow(engine_generator.max_int)
        
        engine = engine_generator(seed)

        kwargs['engine'] = engine

        super().__init__(**kwargs)
    
    def __call__(self, message: bytes) -> bytes:
        int_length = self.state['engine'].int_length
        num_ints = ceil(len(message)/int_length)
        key_stream = [self.state['engine'].rand() for _ in range(num_ints)]
        key_stream = [x.to_bytes(int_length, 'big') for x in key_stream]
        key_stream = reduce(bytes.__add__, key_stream)
        key_stream = key_stream[:len(message)]
        return block_xor(key_stream, message)