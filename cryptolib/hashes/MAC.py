import time
from typing import Callable
from ..utils.byteops import cyclical_xor

def verify_mac(
        signing_oracle: Callable[[bytes], bytes],
        message: bytes,
        mac: bytes,
        sleep_time: int = -1
    ) -> bool:
    """
    Verifies the given message authentication code (mac) using the provided signing oracle. If a non-negative sleep time is provided the verification will perform an insecure comparison, exaggerating the timing difference by sleeping by the number of seconds provided after comparing each byte. Otherwise a constant time comparison will be used.
    
    Args:
        signing_oracle - A function that computes the mac of a message.
        message - The message to verify.
        mac - The mac to verify.
        sleep_time - The number of seconds to sleep between comparing each byte. If this is negative a constant time comparison is performed.
    Returns:
        True if the mac matches the mac generated by the signing oracle, False otherwise.
    """
    putative_mac = signing_oracle(message)
    if len(mac) != len(putative_mac):
        return False
    equal = True
    constant_time = (sleep_time < 0)
    for p, m in zip(putative_mac, mac):
        if p != m:
            equal = False
        if not constant_time:
            if not equal:
                return False
            time.sleep(sleep_time)
    return equal

def prefixMAC(
        hash_fn: Callable[[bytes], bytes], 
        key: bytes, 
        sleep_time: int = -1
    ) -> (Callable[[bytes], bytes], Callable[[bytes, bytes], bool]):
    """
    Generates signing and verification oracles that construct and verify Message Authentication Codes (MACs) by prepending a secret key to a message and then hashing.
    
    The verification oracle can be made to either be constant time or to exaggerate the timing leak incurred when using non-constant time string comparisons.
    
    Args:
        hash_fn - A function that computes a hash of a given byte string.
        key - The key to prepend to a message when constructing and verifying a MAC.
        sleep_time - The number of seconds to sleep in between checking bytes of the mac in a verification oracle. If this is negative a constant time string comparison is used.
    Returns:
        A tuple consisting of a signing function and a verifying function.
    """
    def signing_oracle(message: bytes) -> bytes:
        return hash_fn(key + message)
    verification_oracle = lambda message, mac: verify_mac(signing_oracle, message, mac, sleep_time)
    return signing_oracle, verification_oracle

def suffixMAC(
        hash_fn: Callable[[bytes], bytes], 
        key: bytes, 
        sleep_time: int = -1
    ) -> (Callable[[bytes], bytes], Callable[[bytes, bytes], bool]):
    """
    Generates signing and verification oracles that construct and verify Message Authentication Codes (MACs) by appending a secret key to a message and then hashing.
    
    The verification oracle can be made to either be constant time or to exaggerate the timing leak incurred when using non-constant time string comparisons.
    
    Args:
        hash_fn - A function that computes a hash of a given byte string.
        key - The key to append to a message when constructing and verifying a MAC.
        sleep_time - The number of seconds to sleep in between checking bytes of the mac in a verification oracle. If this is negative a constant time string comparison is used.
    Returns:
        A tuple consisting of a signing function and a verifying function.
    """
    def signing_oracle(message: bytes) -> bytes:
        return hash_fn(message + key)
    verification_oracle = lambda message, mac: verify_mac(signing_oracle, message, mac, sleep_time)
    return signing_oracle, verification_oracle

def HMAC(
        hash_fn: Callable[[bytes], bytes],
        key: bytes,
        sleep_time: int = -1
    ) -> (Callable[[bytes], bytes], Callable[[bytes, bytes], bool]):
    """
    Generates signing and verification oracles that construct and verify Hash-based Message Authentication Codes (HMACs).
    
    The verification oracle can be made to either be constant time or to exaggerate the time it takes to check the timing leak incurred by non-constant time string comparisons.
    
    Args:
        hash_fn - A function that computes a hash of a given byte string.
        key - The key to prepend to a message when constructing and verifying a MAC.
        sleep_time - The number of seconds to sleep in between checking bytes of the mac in a verification oracle. If this is negative a constant time string comparison is used.
    Returns:
        A tuple consisting of a signing function and a verifying function.
    """
    blocksize = len(hash_fn(b''))
    key = key[:blocksize] + bytes(max(0, blocksize - len(key)))
    k1 = cyclical_xor(b'\x36', key)
    k2 = cyclical_xor(b'\x5c', key)
    
    def signing_oracle(message: bytes) -> bytes:
        return hash_fn(k1 + hash_fn(k2 + message))
    
    verification_oracle = lambda message, mac: verify_mac(signing_oracle, message, mac, sleep_time)

    return signing_oracle, verification_oracle